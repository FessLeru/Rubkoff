from typing import Optional, Dict, Any
import logging
from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, WebAppInfo
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.ext.asyncio import AsyncSession

from app.services.scraper import get_all_houses
from app.services.gpt_service import chat_with_gpt, find_best_house
from app.services.mock_service import mock_service, mock_chat_with_gpt, mock_find_best_house
from app.bot.keyboards import (
    get_start_keyboard, get_help_keyboard, 
    get_main_keyboard, get_house_keyboard,
    get_simple_house_keyboard, get_local_test_keyboard,
    get_house_result_keyboard
)
from app.bot.states import SurveyStates
from app.utils.helpers import log_user_action, notify_house_selection, is_admin, register_or_update_user
from app.core.config import config

logger = logging.getLogger(__name__)

# Create router
router = Router()

def is_local_test() -> bool:
    """Check if running in local test mode"""
    return config.effective_mini_app_url.startswith("http://127.0.0.1")

@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext, session: AsyncSession) -> None:
    """Handle /start command"""
    try:
        user_id = message.from_user.id if message.from_user else None
        logger.info(f"Processing /start command for user {user_id}")
        
        if not message.from_user:
            logger.warning("No user information in message")
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
            return

        # Automatically register or update user in database
        user = await register_or_update_user(message.from_user, session)
        if not user:
            logger.error(f"Failed to register/update user {message.from_user.id}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        await log_user_action(message.from_user.id, "start", session=session)
        user_is_admin = await is_admin(message.from_user.id, session)
        logger.debug(f"User {message.from_user.id} is_admin: {user_is_admin}")

        await state.set_state(SurveyStates.waiting_for_start)
        
        keyboard = get_main_keyboard(user_is_admin)
        
        mode_info = " (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)" if config.MOCK_MODE else ""
        local_info = " üß™ –õ–û–ö–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï" if is_local_test() else ""
        
        text = (f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! üëã{mode_info}{local_info}\n\n"
                "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.") if user_is_admin else (
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã{mode_info}{local_info}\n\n"
                "–Ø ‚Äî –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–æ–¥–±–æ—Ä—É –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –¥–æ–º–∞ –æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ Rubkoff.\n\n"
                "–Ø –∑–∞–¥–∞–º –≤–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö –∏ –ø–æ–¥–±–µ—Ä—É –¥–æ–º, "
                "–∫–æ—Ç–æ—Ä—ã–π –∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥–æ–π–¥–µ—Ç –∏–º–µ–Ω–Ω–æ –≤–∞–º.\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")

        await message.answer(text, reply_markup=keyboard)
        logger.info(f"Sent {'admin' if user_is_admin else 'regular'} welcome message to user {message.from_user.id}")
    
    except Exception as e:
        logger.error(f"Error in cmd_start for user {message.from_user.id if message.from_user else 'unknown'}: {e}", exc_info=True)
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @admin"
        )

@router.message(Command("help"))
async def cmd_help(message: Message, session: AsyncSession) -> None:
    """Handle /help command"""
    try:
        user_id = message.from_user.id if message.from_user else None
        logger.info(f"Processing /help command for user {user_id}")
        
        if not message.from_user:
            logger.warning("No user information in message")
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
            return

        # Auto-register user if not exists
        await register_or_update_user(message.from_user, session)
        await log_user_action(message.from_user.id, "help", session=session)
        user_is_admin = await is_admin(message.from_user.id, session)
        logger.debug(f"User {message.from_user.id} is_admin: {user_is_admin}")

        mode_info = "\n\nüß™ <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ" if config.MOCK_MODE else ""

        help_text = (
            "üìö <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:</b>\n\n"
            "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ü–æ–¥–æ–±—Ä–∞—Ç—å –¥–æ–º üè†\" –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞\n\n"
            "2Ô∏è‚É£ –Ø –∑–∞–¥–∞–º –≤–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö:\n"
            "   ‚Ä¢ –ë—é–¥–∂–µ—Ç\n"
            "   ‚Ä¢ –ñ–µ–ª–∞–µ–º–∞—è –ø–ª–æ—â–∞–¥—å –¥–æ–º–∞\n"
            "   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π\n"
            "   ‚Ä¢ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è\n\n"
            "3Ô∏è‚É£ –ü–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç\"\n\n"
            "4Ô∏è‚É£ –Ø –ø–æ–¥–±–µ—Ä—É –¥–ª—è –≤–∞—Å –∏–¥–µ–∞–ª—å–Ω—ã–π –¥–æ–º –∏–∑ –Ω–∞—à–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞\n\n"
            "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "/start ‚Äî –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º\n"
            "/help ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
            "üè¢ <b>–û –∫–æ–º–ø–∞–Ω–∏–∏ Rubkoff:</b>\n"
            "Rubkoff ‚Äî –ª–∏–¥–µ—Ä –Ω–∞ —Ä—ã–Ω–∫–µ —á–∞—Å—Ç–Ω–æ–≥–æ –¥–æ–º–æ—Å—Ç—Ä–æ–µ–Ω–∏—è. "
            "–ú—ã —Å—Ç—Ä–æ–∏–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —ç–∫–æ–ª–æ–≥–∏—á–Ω—ã–µ –¥–æ–º–∞ —Å 2005 –≥–æ–¥–∞.\n\n"
            f"–ü–æ—Å–µ—Ç–∏—Ç–µ –Ω–∞—à —Å–∞–π—Ç: {config.COMPANY_WEBSITE}{mode_info}"
        )

        keyboard = get_help_keyboard(user_is_admin)
        await message.answer(help_text, reply_markup=keyboard, parse_mode="HTML")
        logger.info(f"Sent help message to user {message.from_user.id}")

    except Exception as e:
        logger.error(f"Error in cmd_help for user {message.from_user.id if message.from_user else 'unknown'}: {e}", exc_info=True)
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @admin"
        )

@router.callback_query(F.data == "help")
async def help_button(callback: CallbackQuery, session: AsyncSession) -> None:
    """Handle help button click"""
    try:
        if not callback.from_user:
            await callback.answer("Error: User not found")
            return

        await register_or_update_user(callback.from_user, session)
        await log_user_action(callback.from_user.id, "help_button", session=session)
        user_is_admin = await is_admin(callback.from_user.id, session)
        
        await cmd_help(callback.message, session)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in help_button: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data == "start_survey")
async def start_survey(callback: CallbackQuery, state: FSMContext, session: AsyncSession) -> None:
    """Start the house selection survey"""
    try:
        if not callback.from_user:
            await callback.answer("Error: User not found")
            return

        await register_or_update_user(callback.from_user, session)
        await log_user_action(callback.from_user.id, "survey_start", session=session)

        if config.MOCK_MODE:
            # Mock mode - show result immediately without questions
            logger.info(f"Mock mode - showing result immediately for user {callback.from_user.id}")
            
            await callback.message.answer("üîç –ü–æ–¥–±–∏—Ä–∞—é –¥–æ–º...")
            
            # Use mock service with database
            house_data = await mock_service.process_mock_selection(callback.from_user.id, session)
            if not house_data:
                await callback.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞.")
                await callback.answer()
                return

            message = format_mock_house_message(house_data)
            
            # Choose keyboard based on environment
            if is_local_test():
                keyboard = get_local_test_keyboard(callback.from_user.id)
            else:
                keyboard = get_house_result_keyboard(callback.from_user.id)

            await callback.message.answer(
                f"‚úÖ <b>–î–æ–º –ø–æ–¥–æ–±—Ä–∞–Ω!</b>\n\n{message}", 
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            
            # Send notifications to all admins (without photo)
            await notify_house_selection(
                bot=callback.bot,
                user=callback.from_user,
                house=house_data,
                session=session
            )
            
            await state.set_state(SurveyStates.finished)
        else:
            # Production mode - start survey with questions
            await state.set_state(SurveyStates.in_progress)
            
            houses = await get_all_houses(session)
            if not houses:
                await callback.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–∞—Ç–∞–ª–æ–≥ –¥–æ–º–æ–≤ –ø—É—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                await callback.answer()
                return

            house_info = "\n\n".join([
                f"–î–æ–º {house['name']}: {house['price']} —Ä—É–±., {house['area']} –º¬≤, {house['bedrooms']} —Å–ø–∞–ª–µ–Ω, {house['bathrooms']} –≤–∞–Ω–Ω—ã—Ö, –æ–ø–∏—Å–∞–Ω–∏–µ: {house['description'][:200]}"
                for house in houses[:10]
            ])

            system_message = {
                "role": "system",
                "content": "–ù–∞—á–Ω–∏ –æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –¥–æ–º–∞ —Å—Ä–∞–∑—É —Å –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –ø—Ä–æ –±—é–¥–∂–µ—Ç. "
                          "–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç (1/8). –ù–µ —Å–ø—Ä–∞—à–∏–≤–∞–π —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å –∏ –Ω–µ –¥–æ–±–∞–≤–ª—è–π –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞."
            }

            conversation_history = [system_message]
            await state.update_data(conversation_history=conversation_history)

            gpt_response = await chat_with_gpt("–ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å", conversation_history, houses)
            if not gpt_response:
                await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                await callback.answer()
                return

            assistant_message = {"role": "assistant", "content": gpt_response}
            conversation_history.append(assistant_message)
            await state.update_data(conversation_history=conversation_history)

            await callback.message.answer(gpt_response)

        await callback.answer()

    except Exception as e:
        logger.error(f"Error in start_survey: {e}", exc_info=True)
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await callback.answer()

@router.callback_query(F.data == "restart_survey")
async def restart_survey(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """Restart the survey"""
    if callback.from_user:
        await register_or_update_user(callback.from_user, session)
        await log_user_action(callback.from_user.id, "survey_restart", session=session)
    
    await state.set_state(SurveyStates.waiting_for_start)
    await cmd_start(callback.message, state, session)
    await callback.answer()

@router.callback_query(F.data == "api_test_info")
async def api_test_info(callback: CallbackQuery, session: AsyncSession):
    """Show local API test information"""
    try:
        if callback.from_user:
            await register_or_update_user(callback.from_user, session)
            await log_user_action(callback.from_user.id, "api_test_info", session=session)
        
        message = (
            "üß™ <b>–õ–æ–∫–∞–ª—å–Ω–æ–µ API —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</b>\n\n"
            "üì± <b>–ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:</b>\n"
            "http://127.0.0.1:8000/frontend/?user_id=123\n\n"
            "‚ù§Ô∏è <b>API Health:</b>\n"
            "http://127.0.0.1:8000/api/health\n\n"
            "üè† <b>Mock API –¥–æ–º–æ–≤:</b>\n"
            "http://127.0.0.1:8000/api/houses/mock/recommendations\n\n"
            "üìã <b>API –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:</b>\n"
            "http://127.0.0.1:8000/docs\n\n"
            "üí° <i>–û—Ç–∫—Ä–æ–π—Ç–µ —ç—Ç–∏ —Å—Å—ã–ª–∫–∏ –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</i>"
        )
        
        kb = InlineKeyboardBuilder()
        kb.button(text="üîÑ –ü–æ–¥–æ–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –¥–æ–º", callback_data="restart_survey")
        kb.adjust(1)
        
        await callback.message.answer(message, reply_markup=kb.as_markup(), parse_mode="HTML")
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in api_test_info: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data == "local_test_info")
async def local_test_info(callback: CallbackQuery, session: AsyncSession):
    """Show local test mini app information"""
    try:
        if callback.from_user:
            await register_or_update_user(callback.from_user, session)
            await log_user_action(callback.from_user.id, "local_test_info", session=session)
        
        message = (
            "üß™ <b>–õ–æ–∫–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</b>\n\n"
            "üì± <b>–¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:</b>\n"
            "http://127.0.0.1:8000/frontend/test-welcome.html\n\n"
            "‚ú® <b>–ß—Ç–æ –º–æ–∂–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å:</b>\n"
            "‚Ä¢ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n"
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API\n"
            "‚Ä¢ –¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ —Å–µ—Ä–≤–µ—Ä—É\n"
            "‚Ä¢ –ü–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏\n\n"
            "üí° <i>–û—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞</i>\n\n"
            "‚ö†Ô∏è <i>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –í Telegram Mini App —Ç—Ä–µ–±—É–µ—Ç HTTPS, –ø–æ—ç—Ç–æ–º—É –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä</i>"
        )
        
        kb = InlineKeyboardBuilder()
        kb.button(text="üîÑ –ü–æ–¥–æ–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –¥–æ–º", callback_data="restart_survey")
        kb.button(text="üìä API —Ç–µ—Å—Ç", callback_data="api_test_info")
        kb.adjust(1)
        
        await callback.message.answer(message, reply_markup=kb.as_markup(), parse_mode="HTML")
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in local_test_info: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data == "show_result")
async def show_result(callback: CallbackQuery, state: FSMContext, session: AsyncSession) -> None:
    """Show recommended house"""
    try:
        if not callback.from_user:
            await callback.answer("Error: User not found")
            return

        await register_or_update_user(callback.from_user, session)
        await log_user_action(callback.from_user.id, "show_result", session=session)

        await callback.message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –∏ –ø–æ–¥–±–∏—Ä–∞—é –∏–¥–µ–∞–ª—å–Ω—ã–π –¥–æ–º...")

        if config.MOCK_MODE:
            # Use mock service with database
            house_data = await mock_service.process_mock_selection(callback.from_user.id, session)
            if not house_data:
                await callback.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞.")
                await callback.answer()
                return

            message = format_mock_house_message(house_data)
            
            # Choose keyboard based on environment
            if is_local_test():
                keyboard = get_local_test_keyboard(callback.from_user.id)
            else:
                keyboard = get_house_result_keyboard(callback.from_user.id)

            await callback.message.answer(
                f"‚úÖ <b>–î–æ–º –ø–æ–¥–æ–±—Ä–∞–Ω!</b>\n\n{message}", 
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            
            # Send notifications to all admins (without photo)
            await notify_house_selection(
                bot=callback.bot,
                user=callback.from_user,
                house=house_data,
                session=session
            )
        else:
            # Use real GPT service
            data = await state.get_data()
            conversation_history = data.get("conversation_history", [])
            houses = await get_all_houses(session)

            if not houses:
                await callback.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–∞—Ç–∞–ª–æ–≥ –¥–æ–º–æ–≤ –ø—É—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                await callback.answer()
                return

            house_id = await find_best_house(conversation_history, houses)
            house = next((h for h in houses if h["id"] == house_id), None)

            if not house:
                await callback.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞.")
                await callback.answer()
                return

            message = format_house_message(house)
            
            # Simple keyboard for production mode
            keyboard = get_house_result_keyboard(callback.from_user.id)

            await callback.message.answer(
                f"‚úÖ <b>–î–æ–º –ø–æ–¥–æ–±—Ä–∞–Ω!</b>\n\n{message}", 
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            
            # Send notifications to all admins (without photo)
            await notify_house_selection(
                bot=callback.bot,
                user=callback.from_user,
                house=house,
                session=session
            )

        await state.set_state(SurveyStates.finished)
        await callback.answer()

    except Exception as e:
        logger.error(f"Error in show_result: {e}", exc_info=True)
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await callback.answer()

@router.message(SurveyStates.in_progress)
async def process_survey_step(message: Message, state: FSMContext, session: AsyncSession) -> None:
    """Process user responses during survey"""
    try:
        if not message.from_user:
            return

        await register_or_update_user(message.from_user, session)
        await log_user_action(message.from_user.id, "survey_response", session=session)

        if config.MOCK_MODE:
            # Use mock service
            response, is_complete = await mock_service.process_mock_response(
                message.from_user.id, 
                message.text
            )
            
            if is_complete:
                await state.set_state(SurveyStates.finished)
                kb = InlineKeyboardBuilder()
                kb.button(text="–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", callback_data="show_result")
                kb.button(text="–ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ", callback_data="restart_survey")
                kb.adjust(1)
                await message.answer(
                    f"{response}\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –ø–æ–¥–æ–±—Ä–∞–Ω–Ω—ã–π –¥–æ–º –∏–ª–∏ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.",
                    reply_markup=kb.as_markup()
                )
            else:
                await message.answer(response)
        else:
            # Use real GPT service
            data = await state.get_data()
            conversation_history = data.get("conversation_history", [])
            houses = await get_all_houses(session)

            if not houses:
                await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–∞—Ç–∞–ª–æ–≥ –¥–æ–º–æ–≤ –ø—É—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return

            user_message = {"role": "user", "content": message.text}
            conversation_history.append(user_message)

            gpt_response = await chat_with_gpt(message.text, conversation_history, houses)
            if not gpt_response:
                await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return

            assistant_message = {"role": "assistant", "content": gpt_response}
            conversation_history.append(assistant_message)
            await state.update_data(conversation_history=conversation_history)

            if is_survey_complete(gpt_response):
                await state.set_state(SurveyStates.finished)
                kb = InlineKeyboardBuilder()
                kb.button(text="–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", callback_data="show_result")
                kb.button(text="–ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ", callback_data="restart_survey")
                await message.answer(
                    f"{gpt_response}\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –ø–æ–¥–æ–±—Ä–∞–Ω–Ω—ã–π –¥–æ–º –∏–ª–∏ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.",
                    reply_markup=kb.as_markup()
                )
            else:
                await message.answer(gpt_response)

    except Exception as e:
        logger.error(f"Error in process_survey_step: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def is_survey_complete(response: str) -> bool:
    """Check if survey is complete based on GPT response"""
    completion_keywords = [
        "–æ–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω",
        "–≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–¥–∞–Ω—ã",
        "–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
        "–ø–æ–¥–±–µ—Ä—É –¥–æ–º",
        "–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã",
        "–ø–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"
    ]
    
    response_lower = response.lower()
    return any(keyword in response_lower for keyword in completion_keywords)

def format_house_message(house: Dict[str, Any]) -> str:
    """Format house information for display"""
    message = (
        f"üè† <b>{house['name']}</b>\n\n"
        f"üí∞ –¶–µ–Ω–∞: {house['price']:,.0f} ‚ÇΩ\n"
        f"üìè –ü–ª–æ—â–∞–¥—å: {house['area']} –º¬≤\n"
    )
    
    if house.get('bedrooms'):
        message += f"üõè –°–ø–∞–ª–µ–Ω: {house['bedrooms']}\n"
    if house.get('bathrooms'):
        message += f"üöø –°–∞–Ω—É–∑–ª–æ–≤: {house['bathrooms']}\n"
    if house.get('floors'):
        message += f"üèó –≠—Ç–∞–∂–µ–π: {house['floors']}\n"
    
    if house.get('description'):
        message += f"\nüìù {house['description']}\n"
    
    message += f"\nüîó <a href='{house['url']}'>–ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞ —Å–∞–π—Ç–µ</a>"
    
    return message

def format_mock_house_message(house_data: Dict[str, Any]) -> str:
    """Format mock house message with recommendation score and reasons"""
    message = (
        f"üè† <b>{house_data['name']}</b>\n\n"
        f"üí∞ –¶–µ–Ω–∞: {house_data['price']:,} ‚ÇΩ\n"
        f"üìè –ü–ª–æ—â–∞–¥—å: {house_data['area']} –º¬≤\n"
    )
    
    if house_data.get('bedrooms'):
        message += f"üõè –°–ø–∞–ª–µ–Ω: {house_data['bedrooms']}\n"
    if house_data.get('bathrooms'):
        message += f"üöø –°–∞–Ω—É–∑–ª–æ–≤: {house_data['bathrooms']}\n"
    if house_data.get('floors'):
        message += f"üèó –≠—Ç–∞–∂–µ–π: {house_data['floors']}\n"
    
    if house_data.get('recommendation_score'):
        message += f"\nüéØ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: {house_data['recommendation_score']}%\n"
    
    if house_data.get('match_reasons'):
        message += "\n‚úÖ <b>–ü–æ—á–µ–º—É —ç—Ç–æ—Ç –¥–æ–º –≤–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç:</b>\n"
        for reason in house_data['match_reasons'][:3]:  # Show first 3 reasons
            message += f"‚Ä¢ {reason}\n"
    
    if house_data.get('description'):
        message += f"\nüìù {house_data['description']}\n"
    
    message += f"\nüîó <a href='{house_data['url']}'>–ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞ —Å–∞–π—Ç–µ</a>"
    
    return message

@router.callback_query(F.data.startswith("mini_app_link:"))
async def mini_app_link(callback: CallbackQuery, session: AsyncSession):
    """Show mini app link for HTTP URLs (fallback when HTTPS not available)"""
    try:
        if callback.from_user:
            await register_or_update_user(callback.from_user, session)
            await log_user_action(callback.from_user.id, "mini_app_link", session=session)
        
        # Extract user_id from callback data
        user_id = callback.data.split(":")[1] if ":" in callback.data else callback.from_user.id
        
        # Create mini app URL
        mini_app_url = f"{config.effective_mini_app_url}?user_id={user_id}"
        
        message = (
            "üè† <b>–ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Rubkoff</b>\n\n"
            f"üîó <b>–°—Å—ã–ª–∫–∞:</b>\n<code>{mini_app_url}</code>\n\n"
            "üì± <i>–û—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥–æ–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–æ–º–∞</i>\n\n"
            "‚ö†Ô∏è <i>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –î–ª—è —Ä–∞–±–æ—Ç—ã –≤ Telegram —Ç—Ä–µ–±—É–µ—Ç—Å—è HTTPS. "
            "–°–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä.</i>"
        )
        
        kb = InlineKeyboardBuilder()
        kb.button(text="üîÑ –ü–æ–¥–æ–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –¥–æ–º", callback_data="restart_survey")
        kb.adjust(1)
        
        await callback.message.answer(message, reply_markup=kb.as_markup(), parse_mode="HTML")
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in mini_app_link: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞") 