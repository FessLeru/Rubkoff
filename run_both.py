#!/usr/bin/env python3
"""
–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ (Mock —Ä–µ–∂–∏–º) + Mini App —á–µ—Ä–µ–∑ XTunnel.ru
–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ xtunnel –∏–∑ .env —Ñ–∞–π–ª–∞
"""
import asyncio
import logging
import signal
import sys
import os
from pathlib import Path
from dotenv import load_dotenv

# Windows encoding fix
if sys.platform == "win32":
    os.environ["PYTHONIOENCODING"] = "utf-8"

# Add project root to path
sys.path.insert(0, str(Path(__file__).parent))

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª
load_dotenv()

from app.core.config import config

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('run_both.log', encoding='utf-8')
    ]
)

logger = logging.getLogger(__name__)

class XTunnelManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ xtunnel —Ç—É–Ω–Ω–µ–ª–µ–º —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –∏–∑ .env"""
    
    def __init__(self, port=8000):
        self.port = port
        self.tunnel_url = None
        self.tunnel_process = None
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env
        self.api_key = os.getenv('XTUNNEL_API_KEY')
        self.subdomain = os.getenv('XTUNNEL_SUBDOMAIN', 'rubkoff-app')
        
        if not self.api_key:
            logger.warning("‚ùå XTUNNEL_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        else:
            logger.info(f"‚úÖ XTunnel API –∫–ª—é—á –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ .env")
            logger.info(f"üì° –ü–æ–¥–¥–æ–º–µ–Ω: {self.subdomain}")
    
    def start_tunnel(self):
        """–ó–∞–ø—É—Å–∫ —Ç—É–Ω–Ω–µ–ª—è –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É"""
        if not self.api_key:
            logger.error("API –∫–ª—é—á xtunnel.ru –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env")
            return None
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL —Ç—É–Ω–Ω–µ–ª—è (–±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞)
            self.tunnel_url = f"https://{self.subdomain}.xtunnel.ru"
            
            # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ —Ç—É–Ω–Ω–µ–ª—å –∑–∞–ø—É—â–µ–Ω
            # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã HTTP –∑–∞–ø—Ä–æ—Å –∫ API xtunnel.ru
            logger.info(f"üîó XTunnel URL –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {self.tunnel_url}")
            logger.info(f"üåê –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä: http://127.0.0.1:{self.port}")
            
            # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç—É–Ω–Ω–µ–ª—å –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ xtunnel.ru
            logger.warning("‚ö†Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ç—É–Ω–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ xtunnel.ru")
            logger.warning(f"   –ù–∞–ø—Ä–∞–≤—å—Ç–µ {self.subdomain}.xtunnel.ru ‚Üí 127.0.0.1:{self.port}")
            
            return self.tunnel_url
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ xtunnel: {e}")
            return None
    
    def get_tunnel_url(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ URL —Ç—É–Ω–Ω–µ–ª—è"""
        if self.tunnel_url:
            return self.tunnel_url
        return self.start_tunnel()
    
    def stop_tunnel(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç—É–Ω–Ω–µ–ª—è"""
        if self.tunnel_process:
            try:
                self.tunnel_process.terminate()
                logger.info("üõë XTunnel —Ç—É–Ω–Ω–µ–ª—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except:
                pass

class BothServer:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ + API —á–µ—Ä–µ–∑ XTunnel"""
    
    def __init__(self):
        self.xtunnel = XTunnelManager(8000)
        self.bot_task = None
        self.api_task = None
    
    async def setup_webhook_bot(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å webhook"""
        try:
            from aiogram import Bot, Dispatcher
            from aiogram.client.default import DefaultBotProperties
            from aiogram.enums import ParseMode
            from app.bot.handlers import router as user_router
            from app.bot.middlewares import DatabaseMiddleware, ThrottlingMiddleware
            from app.core.config import config
            
            # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
            bot = Bot(
                token=config.BOT_TOKEN,
                default=DefaultBotProperties(parse_mode=ParseMode.HTML)
            )
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä
            dp = Dispatcher()
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware
            dp.message.middleware(DatabaseMiddleware())
            dp.callback_query.middleware(DatabaseMiddleware())
            dp.message.middleware(ThrottlingMiddleware())
            dp.callback_query.middleware(ThrottlingMiddleware(rate_limit=0.3))
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
            dp.include_router(user_router)
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook
            webhook_url = os.environ.get('WEBHOOK_URL')
            if webhook_url:
                await bot.delete_webhook()
                await bot.set_webhook(url=webhook_url, drop_pending_updates=True)
                logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
                try:
                    admin_id = config.ADMIN_IDS[0]
                    await bot.send_message(
                        admin_id,
                        "üöÄ <b>Rubkoff Bot –∑–∞–ø—É—â–µ–Ω!</b>\n\n"
                        "üåê <b>Tunnel4.com —Ä–µ–∂–∏–º</b>\n"
                        f"üì± Mini App: {os.environ.get('MINI_APP_URL')}\n"
                        f"üîó API: {os.environ.get('API_BASE_URL')}\n"
                        f"üì° Webhook: {webhook_url}\n\n"
                        "‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!"
                    )
                except:
                    pass
            
            return bot, dp
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞: {e}")
            raise
    
    async def run_api_with_webhook(self):
        """–ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞ —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º webhook"""
        try:
            import uvicorn
            from fastapi import FastAPI, Request, HTTPException
            from fastapi.middleware.cors import CORSMiddleware
            from fastapi.responses import JSONResponse
            from fastapi.staticfiles import StaticFiles
            from pathlib import Path
            from aiogram.types import Update
            from app.api.routers import houses, users
            from app.core.db import db
            from app.core.config import config
            from sqlalchemy.ext.asyncio import AsyncSession
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
            await db.init_db()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ—Ç–∞ —Å webhook
            bot, dp = await self.setup_webhook_bot()
            
            # –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            app = FastAPI(
                title="Rubkoff House Selection API + Bot",
                description="API + Telegram Bot –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –¥–æ–º–æ–≤",
                version="1.1.0"
            )
            
            # CORS middleware
            app.add_middleware(
                CORSMiddleware,
                allow_origins=["*"],
                allow_credentials=True,
                allow_methods=["*"],
                allow_headers=["*"],
            )
            
            # Mount frontend
            frontend_path = Path(__file__).parent / "frontend"
            if frontend_path.exists():
                app.mount("/frontend", StaticFiles(directory=frontend_path, html=True), name="frontend")
            
            # Webhook endpoint
            @app.post("/webhook")
            async def handle_webhook(request: Request):
                try:
                    body = await request.body()
                    if not body:
                        return JSONResponse({"status": "ok"})
                    
                    update_data = await request.json()
                    update = Update.model_validate(update_data, context={"bot": bot})
                    
                    # Process the update with database session
                    await dp.feed_update(bot, update)
                    return JSONResponse({"status": "ok"})
                except Exception as e:
                    logger.error(f"Webhook error: {e}", exc_info=True)
                    raise HTTPException(status_code=500, detail="Webhook processing error")
            
            # Include API routers
            app.include_router(houses.router, prefix="/api")
            app.include_router(users.router, prefix="/api")
            
            # Health endpoints
            @app.get("/")
            async def root():
                return {
                    "message": "Rubkoff House Selection API + Bot",
                    "version": "1.1.0", 
                    "status": "healthy",
                    "mock_mode": config.MOCK_MODE
                }
            
            @app.get("/health")
            async def health():
                return {
                    "status": "healthy",
                    "mock_mode": config.MOCK_MODE,
                    "bot_ready": True
                }
            
            logger.info("üåê –ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞ —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º webhook...")
            
            config_uvicorn = uvicorn.Config(
                app=app,
                host="0.0.0.0",
                port=8000,
                reload=False,
                log_level="info"
            )
            
            server = uvicorn.Server(config_uvicorn)
            await server.serve()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            raise
    
    def setup_environment(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–µ–º Mock —Ä–µ–∂–∏–º
        os.environ['MOCK_MODE'] = 'true'
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à –Ω–æ–≤—ã–π xtunnel URL
        tunnel_url = "https://db4c882b-b6b7-4528-a033-f961ba0e9afb.tunnel4.com"
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–ª—è –≤–∞—à–µ–≥–æ —Ç—É–Ω–Ω–µ–ª—è
        os.environ['WEBHOOK_URL'] = f"{tunnel_url}/webhook"
        os.environ['MINI_APP_URL'] = f"{tunnel_url}/frontend/"
        os.environ['API_BASE_URL'] = f"{tunnel_url}/api"
        
        logger.info(f"üåê URLs –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–ª—è –≤–∞—à–µ–≥–æ XTunnel:")
        logger.info(f"   üì° Webhook: {tunnel_url}/webhook")
        logger.info(f"   üì± Mini App: {tunnel_url}/frontend/")
        logger.info(f"   üîó API: {tunnel_url}/api")
        logger.info(f"   üíª –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä: http://127.0.0.1:8000")
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Rubkoff Bot + Mini App...")
        logger.info("üéØ –†–µ–∂–∏–º: MOCK (–±—ã—Å—Ç—Ä—ã–π –ø–æ–¥–±–æ—Ä –¥–æ–º–æ–≤)")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.setup_environment()
        
        try:
            # –ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞ —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º webhook
            await self.run_api_with_webhook()
        except KeyboardInterrupt:
            logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")
        finally:
            logger.info("–°–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

def print_startup_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—É—Å–∫–µ"""
    print("=" * 70)
    print("RUBKOFF BOT + MINI APP - XTUNNEL –ó–ê–ü–£–°–ö")
    print("=" * 70)
    print()
    print("üéØ –†–µ–∂–∏–º: MOCK (–±—ã—Å—Ç—Ä—ã–π –ø–æ–¥–±–æ—Ä –¥–æ–º–æ–≤)")
    print()
    print("–ß—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è:")
    print("   ü§ñ Telegram Bot (—Å webhook)")
    print("   üåê API Server (port 8000)")
    print("   üì± Mini App Frontend")
    print("   üîó Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫")
    print()
    print("üåê –í–ê–® XTUNNEL –†–ï–ñ–ò–ú:")
    print("   üì± Mini App: https://db4c882b-b6b7-4528-a033-f961ba0e9afb.tunnel4.com/frontend/")
    print("   üîó API: https://db4c882b-b6b7-4528-a033-f961ba0e9afb.tunnel4.com/api")
    print("   üì° Webhook: https://db4c882b-b6b7-4528-a033-f961ba0e9afb.tunnel4.com/webhook")
    print("   üíª –õ–æ–∫–∞–ª—å–Ω–æ: http://127.0.0.1:8000")
    print()
    print("‚úÖ –¢–£–ù–ù–ï–õ–¨ –£–ñ–ï –ù–ê–°–¢–†–û–ï–ù - –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å!")
    print()
    print("ü§ñ Telegram Bot:")
    print("   - –ü–æ–¥–±–æ—Ä –¥–æ–º–æ–≤: –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π (Mock —Ä–µ–∂–∏–º)")
    print("   - Mini App –∫–Ω–æ–ø–∫–∞: —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ –≤–∞—à xtunnel")
    print("   - Webhook: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    print()
    print("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    print("-" * 70)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print_startup_info()
    
    server = BothServer()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
    def signal_handler(signum, frame):
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        sys.exit(0)
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    try:
        await server.start()
    except KeyboardInterrupt:
        logger.info("–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚úÖ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1) 