#!/usr/bin/env python3
"""
–ï–¥–∏–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Rubkoff Bot + Mini App —Å tunnel4.com
–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏ –±–æ—Ç–∞, –∏ API —Å–µ—Ä–≤–µ—Ä –≤ –æ–¥–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
"""
import os
import sys
import asyncio
import logging
from typing import Optional
import signal

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è tunnel4.com
os.environ['MINI_APP_URL'] = 'https://bb6fffc5-afcb-4f58-a544-335a0276c44c.tunnel4.com/'
os.environ['API_BASE_URL'] = 'https://bb6fffc5-afcb-4f58-a544-335a0276c44c.tunnel4.com/api'
os.environ['WEBHOOK_URL'] = 'https://bb6fffc5-afcb-4f58-a544-335a0276c44c.tunnel4.com/webhook'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class RubkoffLauncher:
    def __init__(self):
        self.bot = None
        self.dp = None
        self.api_server = None
        self.running = False
        
    async def setup_bot(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –±–æ—Ç–∞"""
        from aiogram import Bot, Dispatcher
        from aiogram.client.default import DefaultBotProperties
        from aiogram.enums import ParseMode
        from app.bot.handlers.user import user_router
        from app.bot.middlewares.throttling import ThrottlingMiddleware
        from app.services.house_selection import get_house_selection_service
        
        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
        self.bot = Bot(
            token=os.environ['BOT_TOKEN'],
            default=DefaultBotProperties(parse_mode=ParseMode.HTML)
        )
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        self.dp = Dispatcher()
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º middleware
        self.dp.message.middleware(ThrottlingMiddleware())
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
        self.dp.include_router(user_router)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å
        service = get_house_selection_service()
        await service.initialize()
        
        logger.info("ü§ñ Bot setup completed")
        
    async def setup_webhook(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook"""
        webhook_url = os.environ['WEBHOOK_URL']
        
        try:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook
            await self.bot.delete_webhook()
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
            await self.bot.set_webhook(
                url=webhook_url,
                drop_pending_updates=True
            )
            
            logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
            try:
                admin_ids = os.environ.get('ADMIN_IDS', '').split(',')
                if admin_ids and admin_ids[0]:
                    await self.bot.send_message(
                        int(admin_ids[0]), 
                        "üöÄ <b>Rubkoff Bot –∑–∞–ø—É—â–µ–Ω!</b>\n\n"
                        "üåê <b>Tunnel4.com —Ä–µ–∂–∏–º</b>\n"
                        f"üì± Mini App: {os.environ['MINI_APP_URL']}frontend/\n"
                        f"üîó API: {os.environ['API_BASE_URL']}\n"
                        f"üì° Webhook: {webhook_url}\n\n"
                        "‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!"
                    )
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {e}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook: {e}")
            raise
    
    async def start_api_server(self):
        """–ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞"""
        import uvicorn
        from app.api.main import app
        
        logger.info("üåê –ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞...")
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞
        config = uvicorn.Config(
            app,
            host="127.0.0.1",
            port=8000,
            log_level="info",
            access_log=True
        )
        
        self.api_server = uvicorn.Server(config)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        await self.api_server.serve()
    
    async def handle_webhook(self, request):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –∑–∞–ø—Ä–æ—Å–æ–≤"""
        from aiogram.types import Update
        from fastapi import Request
        
        try:
            update_data = await request.json()
            update = Update.model_validate(update_data, context={"bot": self.bot})
            await self.dp.feed_update(self.bot, update)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        self.running = True
        
        logger.info("============================================================")
        logger.info("RUBKOFF BOT + MINI APP - TUNNEL4.COM –†–ï–ñ–ò–ú")
        logger.info("============================================================")
        logger.info("üéØ –†–µ–∂–∏–º: MOCK (–±—ã—Å—Ç—Ä—ã–π –ø–æ–¥–±–æ—Ä –¥–æ–º–æ–≤)")
        logger.info("–ß—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è:")
        logger.info("   ü§ñ Telegram Bot")
        logger.info("   üåê API Server (port 8000)")
        logger.info("   üì± Mini App Frontend")
        logger.info("   üîó Webhook endpoints")
        logger.info("")
        logger.info("üåê TUNNEL4.COM –†–ï–ñ–ò–ú:")
        logger.info("   üì± Mini App: https://bb6fffc5-afcb-4f58-a544-335a0276c44c.tunnel4.com/frontend/")
        logger.info("   üîó API: https://bb6fffc5-afcb-4f58-a544-335a0276c44c.tunnel4.com/api")
        logger.info("   üì° Webhook: https://bb6fffc5-afcb-4f58-a544-335a0276c44c.tunnel4.com/webhook")
        logger.info("   üíª –õ–æ–∫–∞–ª—å–Ω–æ: http://127.0.0.1:8000")
        logger.info("")
        logger.info("‚úÖ –¢–£–ù–ù–ï–õ–¨ –£–ñ–ï –ù–ê–°–¢–†–û–ï–ù:")
        logger.info("   bb6fffc5-afcb-4f58-a544-335a0276c44c.tunnel4.com ‚Üí 127.0.0.1:8000")
        logger.info("")
        logger.info("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        logger.info("------------------------------------------------------------")
        
        try:
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ—Ç–∞
            await self.setup_bot()
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook
            await self.setup_webhook()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º API —Å–µ—Ä–≤–µ—Ä
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π webhook...")
            await self.start_api_server()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
            await self.stop()
            raise
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")
        self.running = False
        
        if self.bot:
            try:
                await self.bot.delete_webhook()
                logger.info("‚úÖ Webhook —É–¥–∞–ª–µ–Ω")
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
                try:
                    admin_ids = os.environ.get('ADMIN_IDS', '').split(',')
                    if admin_ids and admin_ids[0]:
                        await self.bot.send_message(
                            int(admin_ids[0]), 
                            "üõë <b>Rubkoff Bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>\n\n–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã"
                        )
                except:
                    pass
                    
                await self.bot.session.close()
                logger.info("‚úÖ Bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: {e}")
        
        if self.api_server:
            try:
                self.api_server.should_exit = True
                logger.info("‚úÖ API —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ API —Å–µ—Ä–≤–µ—Ä–∞: {e}")


def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    sys.exit(0)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    if os.environ.get('BOT_TOKEN') == 'YOUR_REAL_BOT_TOKEN_HERE':
        logger.error("‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–∫–∞–∑–∞–Ω —Ä–µ–∞–ª—å–Ω—ã–π BOT_TOKEN!")
        logger.error("üìù –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª run_tunnel4_bot.py –∏ –∑–∞–º–µ–Ω–∏—Ç–µ:")
        logger.error("   BOT_TOKEN='YOUR_REAL_BOT_TOKEN_HERE'")
        logger.error("   –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –æ—Ç @BotFather")
        return 1
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    launcher = RubkoffLauncher()
    
    try:
        await launcher.start()
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1
    finally:
        await launcher.stop()
    
    return 0


if __name__ == "__main__":
    try:
        exit_code = asyncio.run(main())
        sys.exit(exit_code)
    except KeyboardInterrupt:
        logger.info("‚úÖ –°–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0) 